*
*    NAME:  WARN
*
*    WHAT:  PRINTS THE WARNING MESSAGE
*
*    ENTRY: R0 - WARNING ERROR NUMBER
*           BL   @WARN
*
*    THREE ACTIONS ARE POSSABLE:
*    1. - PRINT  PRINTS WARNING MESSAGE AND CONTINUES
*    2. - STOPS  PRINTS WARNING MESSAGE AND STOPS
*    3. - NEXT   TURNS PRINTING OFF AND CONTINUES

WARN   DECT R10
       MOV  R11,*R10

       BL   @LOOKUP

       LI   R1,STRBUF
       LI   R2,MSGWRN
       BLWP @STRCAT

       BL   @CHKRUN
       JEQ  WRN$$3

       BL   @SROLL
       BL   @ERPRNT
       JMP  WRN$$8

*    TO GET HERE WE MUST BE IN PROGRAM MODE

WRN$$3 BL   @CHKWP
       JEQ  WRN$$8

       BL   @ERPRNT

WRN$$6 BL   @CHKWS
       JNE  WRN$$8

       B    @END

WRN$$8 MOVB @SVPG4,@MAP94
       MOV  *R10+,R11
       RT

       PAGE
*
*    NAME:  LOOKUP
*
*    WHAT:  MAPS IN THE ERROR TABLE AND LOOKS UP THE ERROR
*           NUMBER.
*
*           CALL LOOKUP(INT ERROR_NUM)
*                       R0
*

LOOKUP MOV  R0,R1
       MOV  R0,@14+EENTRY     SAVE THE ERROR CODE FOR LATTER
       SRL  R1,8              GET THE HIGH BYTE
       CI   R1,66             CHECK IF HIGHER THAN MAX
       JLE  LOOK05            JUMP IF OK
       CLR  R1                MAKE IT ZERO
LOOK05 SLA  R1,1              MULTIPLY BY 2

       MOVB @MAP94,@SVPG4     * SAVE THE PREVIOUS PAGE

*    MAP IN THE ERROR MESSAGE TABLE

*      LI   R4,ERRTAB         GET THE OFFSET INTO MEMTBL
*      MOV  R4,R5             COPY IT
*      SRL  R4,8              GET THE PAGE NUMBER
       MOVB @MEMTBL+4,@MAP94

*      ANDI R5,>00FF          MASK OUT INDEX
*      A    @>4000(R5),R1     GET THE TABLE ADDRESS

*      MOV  *R1,R1            READ STRINGS ADDRESS FROM TABLE

       MOV  @ERRTAB(R1),R1

       MOVB *R1+,@08+EENTRY   READ BASIC ERROR NUMBER CODE
       MOV  R1,@10+EENTRY     SAVE STRINGS ADDRESS

       LI   R1,STRBUF         * BLANK BUFFER
       LI   R2,>0020
       LI   R3,252
       BLWP @MEMSET
       CLR  @STRBUF
       RT                     AND RETURN

       PAGE
*
*    NAME:  ERRPRT
*
*    WHAT:  ERROR PRINT ROUTINE
*           FIRST BUILDS THE MESSAGE IN STRBUF, AND THEN PRINTS
*

ERPRNT DECT R10
       MOV  R11,*R10
       BL   @TONE2            * EMIT THE ERROR TONE

       MOV  @10+EENTRY,R2
       LI   R1,STRBUF
       BLWP @STRCAT

* NEXT CHECK IF ERROR WAS CAUSED BY IO

       CB   @14+EENTRY,@ERIOCD
       JNE  ERRP$5

*    CONVERT THE ERROR NUMBER TO ASCII

       MOVB @IOERR+1,R1       GET THE OPERATION CODE
       SRL  R1,8              ALIGN THE REGISTER
       LI   R2,TMPBUF         BUFFER ADDRESS FOR THE STRING
       BLWP @ITOD             CONVERT IT
       AB   @CBH01,@STRBUF    * ADD A SPACE

*    COPY THE STRING ASCII NUMBER

       LI   R1,STRBUF         DST
       LI   R2,TMPBUF         SRC
       BLWP @STRCAT           CONCAT

*    GET THE SECOND ERROR NUMBER AND CONVERT IT

       MOVB @IOERR,R1         GET THE IO ERROR
       SRL  R1,13             ALIGN REGISTER
       LI   R2,TMPBUF         BUFFER ADDRESS FOR STRING
       BLWP @ITOD             CONVERT IT

       LI   R1,STRBUF
       LI   R2,TMPBUF
       BLWP @STRCAT
       JMP  ERRP$6

*    TEST FOR EXTENDED ERROR NUMBER

ERRP$5 MOV  @14+EENTRY,R2
       ANDI R2,>00F0
       JEQ  ERRP$6

* NEXT DETERMINE IF MISSING OR BAD VALUE

       LI   R1,STRBUF

       MOV  @14+EENTRY,R2
       ANDI R2,>FF00
       CI   R2,>1E00
       JEQ  ERRP67

       LI   R2,MSGLM
       BLWP @STRCAT
       JMP  ERRP70

ERRP67 LI   R2,MSGLP
       BLWP @STRCAT

ERRP70 MOV  @14+EENTRY,R2
       ANDI R2,>00F0
       SRA  R2,3
       DECT R2
       AI   R2,EXPTB
       MOV  *R2,R2
       LI   R1,STRBUF
       BLWP @STRCAT

       LI   R2,MSGLR
       BLWP @STRCAT

*    NOW CHECK IF A LINE NUMBER IS PRESENT

ERRP$6 CB   @EENTRY+14,@CBH42  TEST IF LINE TOO LONG IN MERGE
       JEQ  ERRP66            YES, SO FORCE PRINTING OF LINE NUMBER

       BL   @CHKPGM           EXECUTING A PROGRAM
       JNE  ERRP$8            NO

*    CHECK IF A LINE NUMBER IS PRESENT

ERRP66 MOV  @PGMLN,R1         GOT A LINE NUMBER
       JEQ  ERRP$8            NO - SKIP CONVERSION

       LI   R1,STRBUF
       LI   R2,MSGIN
       BLWP @STRCAT

       MOV  @PGMLN,R1         GOT A LINE NUMBER
       LI   R2,TMPBUF         BUFFER ADDRESS FOR STRING
       BLWP @ITOD             INTEGER TO DECIMAL

       LI   R1,STRBUF
       LI   R2,TMPBUF         LINE NUMBER BUFFER
       BLWP @STRCAT

ERRP$8 BL   @SROLL
       LI   R1,STRBUF
       BL   @DOPRT
       BL   @SROLL

       MOV  *R10+,R11
       RT

       PAGE
*
*    NAME:  ERROR
*
*    WHAT:  ERROR HANDLER
*
*    ENTRY: LI  R0,ERROR CODE
*           BL  @ERR0R
*
*    INPUT: R0  - CONTAINS THE ERROR CODE
*
*   OUTPUT: DISPLAYS THE ERROR MESSAGE
*

ERROR  DECT R10
       MOV  R11,*R10

       BL   @LOOKUP           LOOKUP THE ERROR MESSAGE

*    CHECK IF WE EXECUTED AN "ON ERROR" STATEMENT

       MOV  @ERRLN,R0         DO WE PRINT THIS AND STOP
       JNE  ERR$7             YES - GO TO INDICATED LINE

       BL   @CHKRUN           ARE WE IN RUN MODE
       JEQ  ERR$6             YES REPORT IT

*    YES, AN ERROR OCCURED IN RUN
*    IF THE RUN BIT IS NOT SET, THEN WE TOOK
*    A BREAK.

ERR$6A SZCB @PBIT,@PFLAG      CLEAR PROGRAM BIT

ERR$6  BL   @ERPRNT           PRINT THE ERROR MESSAGE

       LI   R0,TOPL15
       MOV  R0,@ERRCOD
       B    @END

*    IF WE GOT HERE, THEN THE USER SET UP "ON ERROR"
*    STATEMENT. BUILD A STACK ENTRY. THEN GO TO THE
*    LINE NUMBER AND START EXECUTING

ERR$7  BL   @CHKRUN           CHECK IF RUN FLAG IS SET
       JNE  ERR$6A            NO HANDLE LIKE NORMAL ERROR

       LI   R0,SIDERR         LOAD SCOPE/TYPE
       MOV  R0,@EENTRY        WRITE IT
       LI   R0,>0980          LOAD SEV, CHANNEL NO.
       MOV  R0,@04+EENTRY     WRITE SEV AND CHANNEL NUMBER

*   NOW TEST IF IO ERROR OR NOT
*   IF I/O ERROR, THEN PUT IN CHANNEL NUMBER

       CB   @14+EENTRY,@ERIOCD   * CHECK IF CHANNEL ERROR
       JNE  ERR$7A            * JUMP IF NO
       MOVB @FICHNO,@05+EENTRY   * CHANNEL NUMBER

ERR$7A MOV  @SMTSRT,@SPGM+EENTRY * SAVE THE START OF THE STATEMENT
       MOV  @CLINE,@SLIN+EENTRY  * SAVE CURRENT LINE NUMBER
       MOV  @PGMLN,@SPLN+EENTRY  * SAVE PROGRAM LINE NUMBER
       CLR  @10+EENTRY           * CLEAR THE ORIGIN FLAG

       MOV  @ERRLN,@CLINE     GET THE LINE NUMBER POINTER
       CLR  @ERRLN            CLEAR ON ERROR LOCATION
       LI   R10,PSTACK        LOAD PROGRAM STACK
       B    @EXEC10           AND RE-ENTER THE EXEC CODE

ERIOCD BYTE >24
CBH42  BYTE >42
