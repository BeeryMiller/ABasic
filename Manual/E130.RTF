{\rtf1\ansi \deff0{\fonttbl{\f8\fswiss Arial;}}\margl720\margr2160\pgnstart130\sectd\pgnrestart\pgnstarts130\footery1080{\header \pard\plain\ql MYARC ADVANCED BASIC\par }{\footer \pard\plain\ql \chpgn     VERSION 4.0  DDI SOFTWARE  \par }\pard \plain\f8\fs20 MOUSE\tab --Commands  \tab \tab \tab \tab \tab \tab \tab \tab          MOUSE\par \par \par \par The MYARC 9640 supports the industry standard MS mouse interface. Software within the operating system is used to position the mouse on the screen and detect mouse key depressions. The mouse itself is implemented as sprite #0 and therefore sprite #0 should not be used elsewhere in the program when using the mouse. In order to easily interface to these low level routines, MYARC Advanced BASIC implements a standard set of mouse commands. An example program is given in Appendix L illustrating the use of these commands.\par \par MOUSE ON\par \par \tab Turns on mouse interrupt. Mouse buttons are checked at the start of each BASIC statement.\par \par \tab If a mouse button is pressed, program execution is branched to an "ON MOUSE" subroutine or \tab subprogram if the particular mouse key pressed was "armed".\par \par MOUSE OFF\par \par \tab Turns off mouse interrupt checking.\par \par MOUSE STOP\par \par \tab Delays action of the mouse button until MOUSE ON statement is encountered. The MOUSE ON \tab interrupts is put on hold until a MOUSE ON command is later executed. Branching then takes \tab place immediately if a mouse button was depressed.\par \par ON MOUSE(buttonnum) GOSUB (linenum)\par \par \tab The program line number of a sub routine is executed when its corresponding button is pressed. \tab Mouse button #1 is the left button.\par \par CALL MKEY(button1status,button2status,button3status,pxlrow,pxlcol)\par \par \tab The variables you use for button#status return the following:\par \par \tab \tab -1 button was pressed only once.\par \tab \tab  0 button is not being or has not been pressed\par \tab \tab  1 button was pressed once since last call\par \par \tab The variables you use for pxlrow and pxlcol return the mouse's position.\par \par \par CALL MLOC(pxlrow,pxlcol)\par \par \tab Returns the location of the row and column when a mouse button was last pressed.\par \par Additionally, the mouse is always sprite pattern 252. It is also always sprite #0. The mouse shape can be defined by using CALL SCHAR(252,patternstring). The mouse default color is 16. It can be changed using CALL COLOR(#0,color). You can alternatively change the mouse color by redefining color 16 with the CALL PALETTE command.\par \par }
