*-------------------------------------------------------------------------
*
*  FILE:    WDS1.152.NMOUSE
*
*  NAME:    MOUSE NUDS
*
*  VERSION: 3.00 -  10/19/86  BASE LINE
*           3.01 -  02/23/87
*
*-------------------------------------------------------------------------
*
*  NAME:    NUD FOR MOUSE
*
*           MOUSE ON      - SETS MOUSE PROCESSING FLAG ON
*           MOUSE OFF     - RESETS MOUSE PROCESS FLAG OFF

NMSE20 MOVB *R12+,R8          * GET NEXT CHARACTRER
       CI   R8,>9100          * CHECK IF OFF
       JNE  NMSE05            * JUMP IF NO
       SZC  @MSABIT,@XFLAG    * CLEAR THE BIT
       SETO R3                * TEEL THE OS TO STOP THE INT PROCESSING
       CLR  R2
       CLR  R1
       LI   R0,X$SETM
       JMP  NMSE24            * ALL DONE


NMOUSE CI   R8,>E300          CHECK IF EXTENDED TOKEN
       JEQ  NMSE20            JUMP IF YES
       CI   R8,>9800
       JEQ  NMSE20+8
       CI   R8,>9B00          CHECK IF ON TOKEN
       JNE  NMSE05            JUMP IF YES
       SOC  @MSABIT,@XFLAG    * SET THE BIT
       MOVB @MSPEED,R3
       SRL  R3,8
       MOV  @MROW,R1
       MOV  @MCOL,R2
       LI   R0,X$SETM
       XOP  @SIX,0
       LI   R0,X$GETR         * NOW FOR A RELATIVE READ FOR NOTHING
NMSE24 XOP  @SIX,0                        MAINLY TO CLEAR MOUSE POS REG'S
NMSE26 MOVB *R12+,R8
NMSE25 B    @CONT


NMSE05 BL   @RPTE03           REPORT ERROR


       PAGE
*
*    WHAT:  CLEAR SCREEN NUD
*
*
NCLSN  BL   @CLRWIN
       JMP  NMSE25


*
*    WHAT:  FREESPACE FUNCTION
*           RETURNS THE AMOUT OF FREE MEMORY IN BASIC
*
*    FREESPACE(NE)
*              0 - ALL OF MEMORY (OR NO (NE))  1+2+3+4
*              1 - BASIC PGM
*              2 - DATA
*              3 - ASM
*              4 - STACK FREE
*
NFREE  CI   R8,>B700          * IS THERE A PARM THERE? (LEFT PAREN)
       JNE  NFALL             * NO, SO DO IT ALL
       BL   @PARONE           * PARSE THE NUMERIC EXP
       JEQ  NFR10             * JUMP IF STRING
       BL   @FTOI             * CONVERT IT
       MOV  @SNUM+FAC,R1
       CI   R1,4
       JH   NFR11
       SLA  R1,1              * TIME 2
       BL   @NFTBL(R1)        * GOTO IT
NFCONT B    @CONT


NFR10  BL   @RPTE07

NFR11  LI   R0,ERRBV
       B    @ERROR

NFTBL  JMP  NFALL
       JMP  NFPGM
       JMP  NFDATA
       JMP  NFASM
       JMP  NFSTK

NFALL  BL   @CALDS            USE STACK FOR ACCUMULATOR  FIRST DATA
       BL   @PSHFAC
       BL   @NFASM            NOW ASSM SPACE
       LI   R0,X$FADD         STACK ARITHMETIC
       BL   @MATHSK
       BL   @PSHFAC
       BL   @NFPGM            NOW PGM SPACE
       LI   R0,X$FADD
       BL   @MATHSK
       BL   @PSHFAC
       BL   @NFSTK            LASTLY STACK
       LI   R0,X$FADD
       BL   @MATHSK
       JMP  NFCONT            ALL DONE

NFDATA BL   @CALDS            THIS WILL WIPE OUT R11, BUT WHO CARES ABOUT THIS
       JMP  NFCONT

NFASM  MOV  @ASMPTR,R4        MAP IN THE ASM >2000 PAGE AT >A000
       MOVB *R4,@MAP9A
       MOV  @>A004,R4         END OF ASM
       S    @>A002,R4         START OF ASM

NFPGM1 DECT R10
       MOV  R11,*R10
       BL   @CALP2
       MOV  *R10+,R11
       RT


NFPGM  MOV  @ELINE,R4
       JNE  NFPGM1            ALL 64K AVAILABLE SITUATION
       LI   R1,K10000         FULL 64K
       MOV  R7,R0
       B    @MOVSTK           ALL DONE


NFSTK  MOV  @VSHIGH,R4
       S    @VSLOW,R4
       JMP  NFPGM1

CALDS  DECT R10
       MOV  R11,*R10          SAVE RETURN
       LI   R1,KH2000         8K TO ARG
       BL   @HTOAR
       MOV  @STREND,R4        GET # OF FULL 8K PAGES
       S    @SYMEND,R4
       DEC  R4
       MOV  R7,R5
       MOV  @CONPI2,*R5+
       CLR  *R5+
       MOV  R4,*R5
       LI   R0,X$FMPY
       BL   @MATH             MULTIPLY
       MOV  R7,R1             MOV THE PRODUCT TO ARG
       LI   R0,ARG
       BL   @MOVSTK
       LI   R4,>2000          GET REMAINDER OF SYMBOL PAGE
       S    @SYMEND+2,R4
       A    @STREND+2,R4      A IN THE PARTIAL OF STRING PAGE
       JMP  CALP4             GO TO ADD THIS AND DONE

CALP2  CI   R4,>8000
       JL   CALP1
CALP5  DECT R10
       MOV  R11,*R10
       BL   @H8TOAR           MOV >8000 (32768) TO FAC
       AI   R4,->8000         TAKE OUT THE >8000
CALP4  MOV  R7,R5
       MOV  @CONPI2,*R5+
       CLR  *R5+
       MOV  R4,*R5
       LI   R0,X$FADD
       BL   @MATH
       MOV  *R10+,R11
       RT

CALP1  MOV  R7,R5
       MOV  @CONPI2,*R5+      SAY IT IS AN INTEGER
       CLR  *R5+
       MOV  R4,*R5            PUT THE INTEGER THERE
       RT

H8TOAR LI   R1,KH8000
HTOAR  LI   R2,ARG
       LI   R3,16
       B    @FASMVW

KH8000 BYTE SIDVS             SIMPLE VALUE
       BYTE SIDRAD            RADIX 99
       DATA 0
       DATA >4203,>1B44,0,0,0,0

KH2000 BYTE SIDVS             SIMPLE VALUE
       BYTE SIDRAD            RADIX 99
       DATA 0
       DATA >4151,>5C00,0,0,0,0

K10000 BYTE SIDVS             >10000
       BYTE SIDRAD
       DATA 0
       DATA >4206,>3724,0,0,0,0
