*-------------------------------------------------------------------------
*
*  FILE:    WDS1.152.NUMFUNC
*
*  NAME:    CONTAINS THE NUMERIC FUNCTIONS
*
*  VERSION: 3.00 - 10/21/86    BASE LINE
*           3.01 - 02/15/87
*
*-------------------------------------------------------------------------
*    NAME:  NMOD
*
*  FORMAT:  MOD(NE, NE)
*
PERCNT TEXT '%'


NMOD   BL   @PARFST           * PARSE FIRST
       JEQ  NMOD15            * JUMP IF STRING
       BL   @FTOI             * CONVERT IT
       BL   @PSHFAC           * SAVE IT
       BL   @PARLST           * PARSE LAST
       JEQ  NMOD14            * JUMP IF STRING
       BL   @FTOI             * CONVERT IT
       AI   R9,-STKSZ         * POP IT HERE, TO SAVE A LITTLE CODE

       MOV  @SNUM+FAC,R2      * GET FROM STACK
       JEQ  NMOD10            * DIVISION BY ZERO
       CLR  R0
       MOV  @SNUM+STKSZ(R9),R1
       JEQ  NMOD11            QUOTIENT IS 0
*      DIVS R2                R2 BY R0,R1
       DATA >0182             IS THE SAME AS THE ABOVE
NMOD11 MOV  R1,@SNUM+FAC      * RETURN
NMOD05 B    @CONT

NMOD10 LI   R0,WRNDBZ         * LOAD ERROR CODE
       BL   @WARN             * INDICATE WARNING
       JMP  NMOD05            * JUST CONTINUE

NMOD14 AI   R9,-STKSZ
NMOD15 BL   @RPTE07           * STRING NUMBER MISMATCH

       PAGE

*    NAME:  NSWAP        STATEMENT
*
*  FORMAT:  SWAP NV,NV
*                SV,SV
*
*  |----|----|----|
*  |PTR |VAL |PTR |
*  | 1  | 1  | 2  |
*  |----|----|----|
*             |
*             R9
NSWAP  MOVB *R12,R8
       BL   @PSYM             GET FIRST VARIABLE
       BL   @PSHFAC           AND SAVE IT          +1  1
       BLWP @GETVS            GET ITS VALUE SPACE
       BL   @PSHFAC           SAVE ITS VALUE SPACE +1  2

       BL   @CKCOMA           ENSURE FOR COMMA

       BL   @PSYM             GET SECOND VARIABLE
       BL   @PSHFAC           SAVE IT              +1  3
       BLWP @GETVS            GET ITS VALUS SPACE

       AI   R9,-STKSZ*2       FIRST VARIABLE ASSGN -2  1
       BL   @ASSG                                  -1  0
       MOV  R0,R0             AND IT IS GOOD
       JNE  NMOD15            STR NUM MISM

       AI   R9,STKSZ*2                             +2  2
       BL   @POPFAC                                -1  1
       AI   R9,STKSZ*2                             +2  3
       BL   @ASSG                                  -1  2
       AI   R9,-STKSZ*2       REMOVE LAST          -2  0
       MOV  R0,R0
       JNE  NMOD15            STR NUM MISM
       B    @CONT             AND CONT

       PAGE

*    NAME:  NLEN
*
*  FORMAT:  LEN(SE)
*

NLEN   BL   @PARONE           * PARSE ONE ARGUMENT
       JNE  NMOD15            * JUMP IF NUMERIC
       MOV  @SLEN+FAC,R1      * GET LENGTH OF STRING

LEN02  MOV  @CONPI2,*R7       * INDICATES ITS VALUE/SPACE INTEGER
       MOV  R1,@SNUM+FAC      * MOVE THE INTEGER
       BL   @ITOF
       B    @CONT

       PAGE

*    NAME:  NASC
*
*  FORMAT:  ASC(SE)

NASC   BL   @PARONE           * PARSE ONE ARGUMNET
       JNE  NMOD15            * JUMP IF NUMERIC
       MOV  @SLEN+FAC,R0      * CHECK IF ZERO LENGTH
       JEQ  NVAL20            * JUMP IF YES

*    MAP IN STRING PAGE

       MOV  @STRP+FAC,R4
       MOVB @DATBUF(R4),@MAP9A
       MOVB @DATBUF+1(R4),@MAP9C

       MOV  @STRA+FAC,R1      GET 13 BIT ADDRESS
       MOVB @>A000(R1),R1     GET THE CHARACTER
       SRL  R1,8              ALIGN REGISTER
       JMP  LEN02             MAKE USE OF COMMON CODE

       PAGE

*    NAME:  NVAL
*
*  FORMAT:  VAL(SE)

NVAL   BL   @PARONE           * PARSE  ARGUMNET
       JNE  NMOD15            * JUMP IF NUMERIC
       MOV  @SLEN+FAC,R3      * CHECK IF NULL STRING
       JEQ  NVAL20            * IF ZERO LENGTH

*
* COMMENT:  THIS ROUTINE COPIES THE STRING FROM STRING
*           SPACE TO THE STRING BUFFER. IN DOING SO IT
*           REMOVES LEADING AND TRAILING SPACES.
*           IT CHECKS THE KIND OF STRING, AND SETS THE XOP TYPE
*

*    MAP IN STRINGS ADDRESS

       MOV  @STRP+FAC,R4
       MOVB @DATBUF(R4),@MAP96
       MOVB @DATBUF+1(R4),@MAP98

       MOV  @STRA+FAC,R4      * GET 13 BIT ADDRESS
       AI   R4,>6000          * MAKE IT 16
VALS11 MOV  R4,R2             * ASSUME THE START HERE
VALS01 CB   *R4+,@SPACE       * IS IT A SPACE?
       JNE  VALS02            * NO, SO NUMBER STARTS HERE
VALS04 DEC  R3                * IS BLANK,SO ANY MORE TO DO ?
       JNE  VALS11            YES, TRY TO FIND THE FIRST NON ZERO CHAR
       JMP  NVAL20            * THE STRING CONTAINS ONLY BLANKS, SO ERROR BD VAL


VALS02 MOV  R2,R4             * NOW, HAVE AT LEAST ONE NON BLANK CHAR HERE
       A    R3,R4             *  SO START ELIMINATING TRAILING BLANKS HERE
VALS05 DEC  R4                * POINT TO LAST CHAR
       CB   *R4,@SPACE        * BLANK?
       JNE  VALS03            * NO
       DEC  R3                * ONE LESS TO SEARCH
       JMP  VALS05            * MUST FIND A NON BLANK

VALS03 CB   *R4,@PERCNT       * IS IT AN INTEGER CONSTANT?
       JNE  NVAL02            * NO, ALL DONE, START PTR IN R2 AND LENGTH IN R3
       DEC  R3                * IS PERCENT, SO CONVERT TO INTEGER
       JEQ  NVAL20            * % IS ONLY CHARACTER, SO ERROR

NVAL04 LI   R0,X$CSIN         * LOAD OP-CODE
       XOP  @TEN,0

       C    R2,R3
       JNE  NVAL20

       MOV  R0,R0
       JNE  NVAL91       ERROR IN CONVERSION
LEN02A MOV  @CONPI2,*R7       * INDICATES ITS VALUE/SPACE INTEGER
       MOV  R1,@SNUM+FAC      * MOVE THE INTEGER
       B    @CONT

NVAL02 LI   R0,X$CSN          * LOAD OP-CODE
       MOV  R7,R1             * GET DESTINATION
       MOV  @CONPI,*R1+       * TYPE IS RADIX99
       CLR  *R1+
       XOP  @TEN,0

*      C    R2,R3
*      JNE  NVAL20

       MOV  R0,R0
       JNE  NVAL91

NVAL88 B    @CONT

VLHX10
NVAL20 BL   @RPTE28           BAD ARGUMENT

NVAL91 LI   R0,WRNNO
       BL   @WARN
       JMP  NVAL88

       PAGE

*    NAME:  VALHX
*
*  FORMAT:  VALHEX(SE)
*
*  RETURN:  INT

VALHX  BL   @PARONE           * PARSE ONE VARIABLE
       JNE  MAX10             * JUMP IF NUMERIC

       CLR  R1                * INITIAL VALUE
       MOV  @SLEN+FAC,R2      * GET BYTE COUNT
       JEQ  LEN02A            LENGTH IS ZERO, SO ERROR CONDITION (OR COMPLETE)

*    MAP IN STRINGS ADDRESS

       MOV  @STRP+FAC,R4
       MOVB @DATBUF(R4),@MAP96
       MOVB @DATBUF+1(R4),@MAP98

       MOV  @STRA+FAC,R3      * GET 13 BIT ADDRESS
       AI   R3,>6000          * MAKE IT 16
VLHX01 CLR  R4
       MOVB *R3+,R4           * GET CHARACTER
       CI   R4,>2000          * TEST IF SPACE
       JEQ  VLHX20            * JUMP IF YES AND SKIP
       JL   VLHX10            * IF LESS, ERROR BAD ARGUMENT
       CI   R4,>3000          * TEST MIN NUMERIC
       JL   VLHX10            * JUMP IF LOWER, BAD ARGUMENT
       CI   R4,>3900          * MAX NUMERIC
       JLE  VLHX20            * JUMP ITS NUMERIC AND COPY
       CI   R4,>4100          * Min alapha
       JL   VLHX10            * ERROR, BAD ARGUMENT
       CI   R4,>4600          * TEST MAX alphaA
       JH   VLHX10            * JUMP ITS AN ERROR
       AI   R4,->700          * Alapha TO NUMERIC adjust
VLHX20 SWPB R4                * PUT IN LSB
       ANDI R4,>000F          * MASK OF ASCII JUNK
       SLA  R1,4
       SOC  R4,R1             * ALL DONE WITH THIS NIBLE
       DEC  R2                ANY MORE TO DO ?
       JNE  VLHX01            YES
       B    @LEN02A

       PAGE

*    NAME:  NPI
*
*  FORMAT:  PI
*

NPI    LI   R1,CONPI          * SOURCE
       MOV  R7,R2             * DESTINATION
       LI   R3,16             * 16 BYTES
       BL   @FASMVW
       B    @CONT             JOIN COMMON CODE

CONPI  BYTE SIDVS             SIMPLE VALUE
       BYTE SIDRAD            RADIX 99
       DATA 0                 FAC2,3
       BYTE >40,03,14,15      3.1415926590E+00
       BYTE 92,65,35,90
       DATA 0
       DATA 0

CONPI2 BYTE SIDVS
       BYTE SIDINT

*
*    NAME:  TERMCH
*
*  FORMAT:  TERMCHAR
*

TERMCH MOVB @TKEY,R1          * GET CHARACTER
       SRL  R1,8              * ALIGN REGISTER
       CI   R1,>0020          * CHECK IF VALID RETURN KEY
       JLE  TERM$3            * JUMP IF YES
       CLR  R1                * NO RETURN 0
TERM$3 B    @LEN02            * CREATE A FAC ENTRY

MAX09  AI   R9,-STKSZ         * REMOVE FIRST PUSH
MAX10  BL   @RPTE07           REPORT ERROR (ERRSNM)

       PAGE

*    NUD FOR MAX
*
*    IF FAC < STACK THEN FALSE COPY ARG TO FAC
*    IF FAC > STACK THEN TRUE  RETURN
*

MXTBL  JMP  NMAX$1            0-1
       JMP  NMAX$2            2-3
       JMP  NMAX$3            4-5
       JMP  NMAX$4            6-7

NMAX   BL   @MAXMIN           GET BOTH ARGUMENTS

       MOV  *R9,R1            * GET STACK TYPE
       A    *R7,R1            * ADD FAC
       ANDI R1,>0006          * STRIP OFF UNUSED BITS
       B    @MXTBL(R1)        * JUMP TO IT

NMAX$1 MOV  R7,R2             FLOAT-1 IN FAC
       MOV  R9,R3             FLOAT-2 ON STACK
NMIN$4 AI   R2,SNUM
       AI   R3,SNUM
       BL   @FASCOM           USE COMPARE ROUTINE IN THE MACHINE
       JGT  NMAX$5            * JUMP IF FLOAT 2 GT
NMEND  AI   R9,-STKSZ         * FLOAT 1 GT
NMAX$6 B    @CONT

NMAX$7 BL   @FTOI
       JMP  NMAX$2

NMAX$3 CB   @SID(R9),@CSIDIN
       JEQ  NMAX$7
       BL   @FTOIS

NMAX$2 C    @SNUM+FAC,@SNUM(R9)
       JGT  NMEND             * JUMP IF FAC GREATER THAN STACK

NMAX$5 BL   @POPFAC           * STACK IS RETURNED
       JMP  NMAX$6            RETURN

NMAX$4 LI   R0,ERRBOS
       BL   @ERROR

*    NUD FOR MIN
*
*    IF FAC < ARG THEN TRUE
*    IF FAC > ARG THEN FALSE COPY ARG TO FAC
*

NMTBL  JMP  NMIN$1            0-1 RADIX99
       JMP  NMIN$2            2-3 INT
       JMP  NMIN$3            4-5 MIXED
       JMP  NMAX$4            6-7 ERROR

NMIN   BL   @MAXMIN           * PARSE INSIDE PARENS

       MOV  *R9,R1            * GET STACK TYPE
       A    *R7,R1            * ADD FAC
       ANDI R1,>0007          * STRIP OFF UNUSED BITS
       B    @NMTBL(R1)        * JUMP TO IT

NMIN$1 MOV  R7,R3             FLOAT-1 IN FAC
       MOV  R9,R2             FLOAT-2 ON STACK
       JMP  NMIN$4            FALSE

NMIN$7 BL   @FTOI
       JMP  NMIN$2

NMIN$3 CB   @SID(R9),@CSIDIN
       JEQ  NMIN$7
       BL   @FTOIS

NMIN$2 C    @SNUM(R9),@SNUM+FAC
       JGT  NMEND
       JMP  NMAX$5

       PAGE

*
*    COMMON ROUTINE FOR MAX/MIN
*
*    MAX(NE, NE)
*    MIN(NE, NE)

MAXMIN DECT R10               MAKE ROOM
       MOV  R11,*R10          SAVE RETURN
       BL   @PARFST           * PARSE FIRST ARGUMENT
       JEQ  MAX10             * JUMP IF STRING
       BL   @PSHFAC           * SAVE VALUE ON STACK
       BL   @PARLST           * PARSE LAST ARGUMENT
       JEQ  MAX09             * JUMP IF STRING
       MOV  *R10+,R11         GET RETURN
       RT

       PAGE
*
*    NAME:  CONVERSIONS
*
*  FORMAT:  CREAL(NE)
*           CINT(NE)
*

NREAL  BL   @PARONE           * PARSE ARGUMENT
       JEQ  MAX10             * JUMP IF STRING
       CB   @SID+FAC,@CSIDRL  * TEST IF ALL READY A RADIX99
       JEQ  CCOM2             * JUMP IF YES

       LI   R0,X$CIF          LOAD XOP CODE
       MOV  @SNUM+FAC,R2      GET THE INTEGER
       LI   R1,FAC+SNUM
       XOP  @TEN,0

       MOV  @CONPI,*R7        SET ITS TYPE
       JMP  CCOM2

NCINT  BL   @PARONE           PARSE ONE PARAMETER
       JEQ  MAX10             JUMP IF STRING
       CB   @SID+FAC,@CSIDIN  CHECK IF ALREADY INTEGER
       JEQ  CCOM2

       LI   R0,X$CFI          LOAD XOP CODE
       LI   R2,FAC+SNUM
       XOP  @TEN,0
       MOV  R1,@SNUM+FAC
       MOV  @CONPI2,*R7

CCOM2  B    @CONT

